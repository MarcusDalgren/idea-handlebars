/* The following code was generated by JFlex 1.4.3 on 2/24/13 4:15 PM */

// We base our lexer directly on the official handlebars.l lexer definition,
// making some modifications to account for Jison/JFlex syntax and functionality differences
//
// Revision ported: https://github.com/wycats/handlebars.js/commit/0b97fea56faaf48de1b6aa1a67b3796c15a45d01#src/handlebars.l,
//      plus the fix in https://github.com/wycats/handlebars.js/commit/5a6e4f1ddde219d4043648816256342a447536c5#src/handlebars.l

package com.dmarcotte.handlebars.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;

// suppress various warnings/inspections for the generated class
@SuppressWarnings ({"FieldCanBeLocal", "UnusedDeclaration", "UnusedAssignment", "AccessStaticViaInstance", "MismatchedReadAndWriteOfArray", "WeakerAccess", "SameParameterValue", "CanBeFinal", "SameReturnValue", "RedundantThrows", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/24/13 4:15 PM from the specification file
 * <tt>handlebars.flex</tt>
 */
final class _HbLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int mu = 2;
  public static final int emu = 4;
  public static final int YYINITIAL = 0;
  public static final int data = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\16\1\1\1\1\22\0\1\1\1\12\1\17"+
    "\1\6\1\32\1\0\1\11\6\0\1\32\1\15\1\7\12\31\3\0"+
    "\1\14\1\5\1\0\1\20\32\35\1\33\1\4\1\34\1\10\1\32"+
    "\1\0\1\30\3\35\1\21\1\27\5\35\1\22\5\35\1\25\1\23"+
    "\1\24\1\26\5\35\1\3\1\0\1\13\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\0\1\1\1\3\1\2\1\3\1\4"+
    "\1\3\1\5\1\4\1\3\1\6\6\3\1\2\1\3"+
    "\1\7\1\3\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\0\1\16\1\17\4\0\1\20\2\0\1\21\1\22"+
    "\1\11\1\23\1\24\1\25\1\26\1\27\1\0\1\13"+
    "\3\0\1\21\4\0\1\30\1\31\1\32\1\33\1\0"+
    "\1\30\1\31\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\226\0\360\0\226\0\u010e\0\u012c\0\226\0\u014a\0\u0168"+
    "\0\u0186\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\u021c\0\226\0\u023a"+
    "\0\u0258\0\u0276\0\u0294\0\u02b2\0\226\0\226\0\u012c\0\u02d0"+
    "\0\226\0\226\0\u0168\0\u02ee\0\u030c\0\u032a\0\226\0\u01c2"+
    "\0\u01e0\0\u0348\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\u0366\0\226\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc"+
    "\0\u041a\0\u0438\0\u0456\0\u0474\0\u0492\0\226\0\226\0\u04b0"+
    "\0\226\0\226\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\1\1\5\32\1\1\6\2\7\1\10\3\6\1\11"+
    "\3\6\1\12\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\2\20\1\21\2\20\1\22\1\20\1\23\1\20\1\24"+
    "\1\6\1\20\1\6\2\25\1\26\1\27\32\6\2\25"+
    "\10\6\1\30\5\6\10\31\4\6\1\31\3\1\1\32"+
    "\32\1\37\0\2\7\13\0\1\7\22\0\1\33\45\0"+
    "\1\34\23\0\2\35\10\0\1\35\1\0\1\36\1\35"+
    "\17\0\4\37\1\40\12\37\1\41\16\37\1\0\2\42"+
    "\4\0\1\42\3\0\4\42\2\0\1\43\1\44\10\43"+
    "\2\0\1\43\1\0\2\42\4\0\1\42\3\0\4\42"+
    "\2\0\12\43\2\0\1\43\1\0\2\42\4\0\1\42"+
    "\3\0\4\42\2\0\4\43\1\45\5\43\2\0\1\43"+
    "\1\0\2\42\4\0\1\42\3\0\4\42\2\0\7\43"+
    "\1\46\2\43\2\0\1\43\1\0\2\47\4\0\1\42"+
    "\3\0\1\47\2\42\1\47\2\0\10\43\1\50\1\43"+
    "\2\0\1\43\34\51\1\36\1\51\1\0\2\25\36\0"+
    "\1\52\45\0\1\53\43\0\10\31\4\0\1\31\3\0"+
    "\1\54\35\0\1\55\1\0\1\56\1\57\1\60\1\61"+
    "\1\55\1\62\36\0\1\63\22\0\2\37\1\0\33\37"+
    "\1\0\2\42\4\0\1\42\3\0\4\42\2\0\2\43"+
    "\1\64\7\43\2\0\1\43\1\0\2\42\4\0\1\42"+
    "\3\0\4\42\2\0\5\43\1\65\4\43\2\0\1\43"+
    "\1\0\2\42\4\0\1\42\3\0\4\42\2\0\1\43"+
    "\1\66\10\43\2\0\1\43\3\52\1\67\32\52\13\62"+
    "\1\70\22\62\1\0\2\42\4\0\1\42\3\0\4\42"+
    "\2\0\1\71\11\43\2\0\1\43\1\0\2\42\4\0"+
    "\1\42\3\0\4\42\2\0\1\72\11\43\2\0\1\43"+
    "\1\0\2\42\4\0\1\42\3\0\4\42\2\0\2\43"+
    "\1\73\7\43\2\0\1\43\3\52\1\74\32\52\13\62"+
    "\1\75\22\62\1\0\2\76\4\0\1\42\3\0\1\76"+
    "\2\42\1\76\2\0\12\43\2\0\1\43\1\0\2\77"+
    "\4\0\1\42\3\0\1\77\2\42\1\77\2\0\12\43"+
    "\2\0\1\43\1\0\2\42\4\0\1\42\3\0\4\42"+
    "\2\0\1\100\11\43\2\0\1\43\3\0\1\101\45\0"+
    "\1\102\23\0\2\103\4\0\1\42\3\0\1\103\2\42"+
    "\1\103\2\0\12\43\2\0\1\43";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1230];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\0\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\10\1\1\11\5\1\2\11\2\0\2\11"+
    "\4\0\1\11\2\0\1\1\7\11\1\0\1\11\3\0"+
    "\1\1\4\0\2\1\2\11\1\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushState(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    public void yypopState() {
      yybegin(stack.pop());
    }


  _HbLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HbLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 94) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { // otherwise, if the remaining text just contains the one escaped mustache, then it's all CONTENT
        return HbTokenTypes.CONTENT;
          }
        case 29: break;
        case 25: 
          { // backtrack over any extra stache characters at the end of this string
    while (yylength() > 2 && yytext().subSequence(yylength() - 3, yylength()).toString().equals("}}}")) {
      yypushback(1);
    }
    yypopState();
    return HbTokenTypes.COMMENT;
          }
        case 30: break;
        case 2: 
          { return HbTokenTypes.WHITE_SPACE;
          }
        case 31: break;
        case 28: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { return HbTokenTypes.BOOLEAN;
          }
        case 32: break;
        case 27: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return HbTokenTypes.BOOLEAN;
          }
        case 33: break;
        case 20: 
          { return HbTokenTypes.OPEN_PARTIAL;
          }
        case 34: break;
        case 4: 
          { return HbTokenTypes.SEP;
          }
        case 35: break;
        case 12: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return HbTokenTypes.ID;
          }
        case 36: break;
        case 13: 
          { return HbTokenTypes.ID;
          }
        case 37: break;
        case 15: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return HbTokenTypes.ID;
          }
        case 38: break;
        case 8: 
          { yypopState(); return HbTokenTypes.DATA;
          }
        case 39: break;
        case 26: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return HbTokenTypes.ELSE;
          }
        case 40: break;
        case 9: 
          { // backtrack over any stache characters at the end of this string
          while (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")) {
            yypushback(1);
          }

          if (yylength() > 0 && yytext().toString().substring(yylength() - 1, yylength()).equals("\\")) {
            yypushState(emu);
          } else {
            yypushState(mu);
          }

          // we stray from the Handlebars grammar a bit here since we need our WHITE_SPACE more clearly delineated
          //    and we need to avoid creating extra tokens for empty strings (makes the parser and formatter happier)
          if (!yytext().toString().equals("")) {
              if (yytext().toString().trim().length() == 0) {
                  return HbTokenTypes.WHITE_SPACE;
              } else {
                  return HbTokenTypes.CONTENT;
              }
          }
          }
        case 41: break;
        case 18: 
          { yypushback(2); yypopState();
          }
        case 42: break;
        case 10: 
          { return HbTokenTypes.OPEN;
          }
        case 43: break;
        case 22: 
          { return HbTokenTypes.OPEN_ENDBLOCK;
          }
        case 44: break;
        case 23: 
          { return HbTokenTypes.OPEN_INVERSE;
          }
        case 45: break;
        case 14: 
          { return HbTokenTypes.STRING;
          }
        case 46: break;
        case 21: 
          { return HbTokenTypes.OPEN_BLOCK;
          }
        case 47: break;
        case 6: 
          { yypushState(data); return HbTokenTypes.DATA_PREFIX;
          }
        case 48: break;
        case 19: 
          { return HbTokenTypes.OPEN_UNESCAPED;
          }
        case 49: break;
        case 1: 
          { return HbTokenTypes.CONTENT;
          }
        case 50: break;
        case 5: 
          { return HbTokenTypes.EQUALS;
          }
        case 51: break;
        case 11: 
          { yypopState(); return HbTokenTypes.CLOSE;
          }
        case 52: break;
        case 24: 
          { // grab everything up to the next open stache
          // backtrack over any stache characters at the end of this string
          while (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")) {
            yypushback(1);
          }

          if (yylength() > 0 && yytext().toString().substring(yylength() - 1, yylength()).equals("\\")) {
            // the next mustache is escaped, push back the escape char so that we can lex it as such
            yypushback(1);
          } else {
            // the next mustache is not escaped, we're done in this state
            yypopState();
          }

          return HbTokenTypes.CONTENT;
          }
        case 53: break;
        case 3: 
          { return HbTokenTypes.INVALID;
          }
        case 54: break;
        case 7: 
          { /* ignore */
          }
        case 55: break;
        case 16: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return HbTokenTypes.INTEGER;
          }
        case 56: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
